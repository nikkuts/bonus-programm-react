{"version":3,"file":"static/js/708.72d73cce.chunk.js","mappings":"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","sources":["../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/native.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/v4.js","components/Calculator/Calculator.module.css","components/Calculator/Calculator.jsx","../node_modules/crypto-js/core.js","../node_modules/crypto-js/enc-base64.js","../node_modules/crypto-js/enc-utf8.js","../node_modules/crypto-js/sha1.js"],"sourcesContent":["// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;","// extracted by mini-css-extract-plugin\nexport default {};","import Base64 from 'crypto-js/enc-base64';\nimport SHA1 from 'crypto-js/sha1';\nimport enc from 'crypto-js/enc-utf8';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useAuth } from 'hooks';\nimport css from './Calculator.module.css';\n\nexport default function Calculator () {\n  const {user} = useAuth();\n  const privateKey = 'sandbox_y7XJxkWfQbDHk9E5AxjwG2Bs05cnLaZSszE6fXSH'; \n  const apiEndpoint = 'https://www.liqpay.ua/api/3/checkout'; \n\n  const isAmountValid = (value) => {\n    const amount = parseFloat(value);\n    if (isNaN(amount) || amount % 40 !== 0) {\n      alert('Сума повинна бути кратною 40');\n      return false;\n    }\n    return true;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    const calc = e.currentTarget;\n\n    if (!isAmountValid(calc.elements.amount.value)) {\n      return;\n    }\n\n    const orderId = uuidv4();\n\n    // Кодуємо дані JSON у рядок та потім у Base64\n    const dataString = JSON.stringify({ \n      public_key: 'sandbox_i34988561100', \n      version: '3',\n      action: 'paydonate',\n      amount: calc.elements.amount.value,\n      currency: 'UAH',\n      description: 'Підтримка проєкту',\n      order_id: orderId,\n      result_url: 'https://nikkuts.github.io/bonus-programm-react/',\n      server_url: 'https://bonus-programm-backend.onrender.com',\n      customer: user.id,\n    });\n    const data = Base64.stringify(enc.parse(dataString));\n\n    // Створюємо підпис\n    const hash = SHA1(privateKey + data + privateKey);\n    const signature = Base64.stringify(hash);\n    \n    const postData = {\n      data: data,\n      signature: signature,\n    };\n\n    // Створення форми та автоматичне надсилання\n    const form = document.createElement('form');\n    form.method = 'POST';\n    form.action = apiEndpoint;\n    form.acceptCharset = 'utf-8';\n\n    // Додавання прихованих полів\n    Object.entries(postData).forEach(([name, value]) => {\n      const input = document.createElement('input');\n      input.type = 'hidden';\n      input.name = name;\n      input.value = value;\n      form.appendChild(input);\n    });\n\n    // Додавання форми до body та автоматичне відправлення\n    document.body.appendChild(form);\n    form.submit();\n    document.body.removeChild(form);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.form}>\n      <label className={css.label}>\n        Введіть сумму\n        <input\n          type=\"number\"\n          name=\"amount\"\n        />\n      </label>\n      <button type=\"submit\" className={css.button}>\n        Підтримати\n      </button>\n    </form>\n  );\n};\n\n\n\n\n// import { useNavigate } from 'react-router-dom';\n// import axios from 'axios';\n// import { useAuth } from 'hooks';\n// import css from './Calculator.module.css';\n\n// axios.defaults.baseURL = \"https://api.monobank.ua\";\n\n// export default function Calculator () {\n//   const navigate = useNavigate();\n//   const {user} = useAuth();\n\n//   const createInvoice = async (credentials) => {\n//     try {\n//       const response = await axios.post('/api/merchant/invoice/create', credentials, {\n//         headers: {\n//           'X-Token' : 'uyj5rPqx_QcltpWAZPONVZekEnxJOrdeKDH6FWysAtII',\n//           'Content-Type': 'application/json',\n//         },\n//       });\n//       return response.data;\n//     } \n//     catch (error) {\n//       console.error('Помилка під час відправлення форми:', error);\n//       alert('Помилка відправки форми. Будь ласка, спробуйте повторити.');\n//     }\n//   }\n\n//   const isAmountValid = (value) => {\n//     const amount = parseFloat(value);\n//     return !isNaN(amount) && amount % 40 === 0;\n//   };\n\n//   const handleSubmit = e => {\n//     e.preventDefault();\n//     const form = e.currentTarget;\n\n//     if (!isAmountValid(form.elements.amount.value)) {\n//       alert('Сума повинна бути кратною 40');\n//       return;\n//     }\n\n//     const formData = {\n//       amount: form.elements.amount.value * 100,\n//       ccy: 980,\n//       merchantPaymInfo: {\n//         reference: user.id,\n//         },\n//       redirectUrl: \"https://nikkuts.github.io/bonus-programm-react/\",\n//       webHookUrl: \"https://bonus-programm-backend.onrender.com\",\n//     };\n  \n//     const response = createInvoice(formData);\n\n//     if (response) {\n//       navigate(response.pageUrl);\n//     }\n\n//     form.reset();\n//   };\n\n//   return (\n//     <div>\n//       <form className={css.form} onSubmit={handleSubmit} autoComplete=\"off\">\n//         <label className={css.label}>\n//           <input placeholder='Введіть суму' type=\"text\" name=\"amount\" />\n//         </label>\n//         <button className={css.button} type=\"submit\">Підтримати</button>\n//       </form>\n//     </div>   \n//   );\n// };",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\troot.CryptoJS = factory();\n\t}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof global !== 'undefined' && global.crypto) {\n\t        crypto = global.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && typeof require === 'function') {\n\t        try {\n\t            crypto = require('crypto');\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS.enc.Utf8;\n\n}));",";(function (root, factory) {\n\tif (typeof exports === \"object\") {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(require(\"./core\"));\n\t}\n\telse if (typeof define === \"function\" && define.amd) {\n\t\t// AMD\n\t\tdefine([\"./core\"], factory);\n\t}\n\telse {\n\t\t// Global (browser)\n\t\tfactory(root.CryptoJS);\n\t}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));"],"names":["getRandomValues","randomUUID","crypto","bind","rnds8","Uint8Array","rng","Error","byteToHex","i","push","toString","slice","unsafeStringify","arr","offset","arguments","length","undefined","options","buf","native","rnds","random","Calculator","user","useAuth","privateKey","isAmountValid","value","amount","parseFloat","isNaN","alert","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","e","calc","orderId","dataString","data","hash","signature","postData","form","_context","prev","next","preventDefault","currentTarget","elements","abrupt","uuidv4","JSON","stringify","public_key","version","action","currency","description","order_id","result_url","server_url","customer","id","Base64","enc","SHA1","document","createElement","method","acceptCharset","Object","entries","forEach","_ref2","_ref3","_slicedToArray","name","input","type","appendChild","body","submit","removeChild","stop","_x","apply","_jsxs","onSubmit","className","css","children","_jsx","module","exports","CryptoJS","Math","window","self","globalThis","msCrypto","global","require","err","cryptoSecureRandomInt","Uint32Array","randomBytes","readInt32LE","create","F","obj","subtype","prototype","C","C_lib","lib","Base","extend","overrides","this","mixIn","hasOwnProperty","init","$super","instance","properties","propertyName","clone","WordArray","words","sigBytes","encoder","Hex","concat","wordArray","thisWords","thatWords","thisSigBytes","thatSigBytes","clamp","thatByte","j","ceil","call","nBytes","C_enc","hexChars","bite","join","parse","hexStr","hexStrLength","parseInt","substr","Latin1","latin1Chars","String","fromCharCode","latin1Str","latin1StrLength","charCodeAt","Utf8","decodeURIComponent","escape","utf8Str","unescape","encodeURIComponent","BufferedBlockAlgorithm","reset","_data","_nDataBytes","_append","_process","doFlush","processedWords","dataWords","dataSigBytes","blockSize","nBlocksReady","nWordsReady","max","_minBufferSize","nBytesReady","min","_doProcessBlock","splice","C_algo","Hasher","cfg","_doReset","update","messageUpdate","finalize","_doFinalize","_createHelper","hasher","message","_createHmacHelper","key","HMAC","algo","factory","root","parseLoop","base64Str","base64StrLength","reverseMap","bitsCombined","map","_map","base64Chars","triplet","charAt","paddingChar","_reverseMap","paddingIndex","indexOf","W","_hash","M","H","a","b","c","d","n","t","nBitsTotal","nBitsLeft","floor","HmacSHA1"],"sourceRoot":""}